
ATmega328PMegOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000a5a  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800114  00800114  00000b02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cce  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b5  00000000  00000000  00001976  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000941  00000000  00000000  0000222b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000354  00000000  00000000  00002b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000690  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000068a  00000000  00000000  00003550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003bda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  9e:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <megos_context_switch>:
	; The return address is pushed onto the stack just before this function
	; as part of the function call. (See avr-gcc ABI documentation)
	; Thus, it is expected that this function be tail called/ close to
	; tail called (although this is not required). This is expected so that
	; the task will return to its main task as soon as the context switch occurs.
	in r0, _SREG ; Save the Status Register near the 'bottom' of the stack.
  a6:	0f b6       	in	r0, 0x3f	; 63
				 ; We want it to be one of the last things restored.
				 ; Access the Status Register via its IO mapped address.
				 ; This is 0x3F. See atmel manual 11.3.1
	push r0      ; Put the SREG above the GPRs on the stack.
  a8:	0f 92       	push	r0
				 ; Now we want the stack pointer to be in the location provided as
				 ; an argument.
	push r31
  aa:	ff 93       	push	r31
	push r30
  ac:	ef 93       	push	r30
	push r29
  ae:	df 93       	push	r29
	push r28
  b0:	cf 93       	push	r28
	push r27
  b2:	bf 93       	push	r27
	push r26
  b4:	af 93       	push	r26
	push r25
  b6:	9f 93       	push	r25
	push r24
  b8:	8f 93       	push	r24
	push r23
  ba:	7f 93       	push	r23
	push r22
  bc:	6f 93       	push	r22
	push r21
  be:	5f 93       	push	r21
	push r20
  c0:	4f 93       	push	r20
	push r19
  c2:	3f 93       	push	r19
	push r18
  c4:	2f 93       	push	r18
	push r17
  c6:	1f 93       	push	r17
	push r16
  c8:	0f 93       	push	r16
	push r15
  ca:	ff 92       	push	r15
	push r14
  cc:	ef 92       	push	r14
	push r13
  ce:	df 92       	push	r13
	push r12
  d0:	cf 92       	push	r12
	push r11
  d2:	bf 92       	push	r11
	push r10
  d4:	af 92       	push	r10
	push r9
  d6:	9f 92       	push	r9
	push r8
  d8:	8f 92       	push	r8
	push r7
  da:	7f 92       	push	r7
	push r6
  dc:	6f 92       	push	r6
	push r5
  de:	5f 92       	push	r5
	push r4
  e0:	4f 92       	push	r4
	push r3
  e2:	3f 92       	push	r3
	push r2
  e4:	2f 92       	push	r2
	push r1
  e6:	1f 92       	push	r1
	push r0
  e8:	0f 92       	push	r0
	mov r26, r24 ; See atmel manual 11.4. Load X (low byte) with SP Destination low byte
  ea:	a8 2f       	mov	r26, r24
	mov r27, r25
  ec:	b9 2f       	mov	r27, r25
	in r0, _SPL
  ee:	0d b6       	in	r0, 0x3d	; 61
	st X+, r0    ; X+ is post-increment. This stores the value of _SPH at the address X and
  f0:	0d 92       	st	X+, r0
				 ; then increments X
	in r0, _SPH  
  f2:	0e b6       	in	r0, 0x3e	; 62
	st X, r0
  f4:	0c 92       	st	X, r0
	; Load the new context.
	; See "Frame Layout" of the ABI in the avr-gcc documentation.
	mov r26, r22    ; Get the address that the second  argument pointer is pointing to.
  f6:	a6 2f       	mov	r26, r22
	mov r27, r23
  f8:	b7 2f       	mov	r27, r23
	ld r22, X+
  fa:	6d 91       	ld	r22, X+
	ld r23, X
  fc:	7c 91       	ld	r23, X
	out _SPL, r22	; Now our stack pointer is pointing at the location that we previously
  fe:	6d bf       	out	0x3d, r22	; 61
	out _SPH, r23   ; stored the context for this task, so we can start popping.
 100:	7e bf       	out	0x3e, r23	; 62
	pop r0
 102:	0f 90       	pop	r0
	pop r1
 104:	1f 90       	pop	r1
	pop r2
 106:	2f 90       	pop	r2
	pop r3
 108:	3f 90       	pop	r3
	pop r4
 10a:	4f 90       	pop	r4
	pop r5
 10c:	5f 90       	pop	r5
	pop r6
 10e:	6f 90       	pop	r6
	pop r7
 110:	7f 90       	pop	r7
	pop r8
 112:	8f 90       	pop	r8
	pop r9
 114:	9f 90       	pop	r9
	pop r10
 116:	af 90       	pop	r10
	pop r11
 118:	bf 90       	pop	r11
	pop r12
 11a:	cf 90       	pop	r12
	pop r13
 11c:	df 90       	pop	r13
	pop r14
 11e:	ef 90       	pop	r14
	pop r15
 120:	ff 90       	pop	r15
	pop r16
 122:	0f 91       	pop	r16
	pop r17
 124:	1f 91       	pop	r17
	pop r18
 126:	2f 91       	pop	r18
	pop r19
 128:	3f 91       	pop	r19
	pop r20
 12a:	4f 91       	pop	r20
	pop r21
 12c:	5f 91       	pop	r21
	pop r22
 12e:	6f 91       	pop	r22
	pop r23
 130:	7f 91       	pop	r23
	pop r24
 132:	8f 91       	pop	r24
	pop r25
 134:	9f 91       	pop	r25
	pop r26
 136:	af 91       	pop	r26
	pop r27
 138:	bf 91       	pop	r27
	pop r28
 13a:	cf 91       	pop	r28
	pop r29
 13c:	df 91       	pop	r29
	pop r30
 13e:	ef 91       	pop	r30
	pop r31
 140:	ff 91       	pop	r31
	pop r0
 142:	0f 90       	pop	r0
	out _SREG, r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	18 95       	reti

00000148 <test_task>:
#include "megos_scheduler.h"
#include "megos_settings.h"

static int test_int = 0;
void test_task(void)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		test_int++;
 150:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 154:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 15e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	}	
 162:	f6 cf       	rjmp	.-20     	; 0x150 <test_task+0x8>

00000164 <main>:
}

int main(void)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
	megos_init();
 16c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <megos_init>
	megos_new_task(&test_task, SCHEDULER_DEFAULT_TASK_SIZE);
 170:	60 e8       	ldi	r22, 0x80	; 128
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	84 ea       	ldi	r24, 0xA4	; 164
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 59 02 	call	0x4b2	; 0x4b2 <megos_new_task>
    /* Replace with your application code */
    while (1) 
    {
    }
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x18>

0000017e <__vector_14>:
// to be deprecated, so use _vect.
// The interrupt source we want is one of the timers. We will choose timer 0.
// See page 82 of Atmega328P for interrupt source.
// http://www.microchip.com/webdoc/avrlibcreferencemanual/group__avr__interrupts.html
ISR(TIMER0_COMPA_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
	// then upon return, the exit procedure for leaving an ISR is to pop the return address
	// off the stack. Since the return address for an ISR will be the address that was
	// interrupted, pointing to the stack pointer of this context will cause that address
	// to be returned to.
	// TODO: Explain this better.
	cli();
 1aa:	f8 94       	cli
	megos_schedule();
 1ac:	0e 94 80 02 	call	0x500	; 0x500 <megos_schedule>
	sei();
 1b0:	78 94       	sei
}
 1b2:	00 00       	nop
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <megos_init>:

 #include "megos.h"
 #include "megos_system.h"

 void megos_init()
 {
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
	megos_sched_timer_set(1);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <megos_sched_timer_set>
 1ec:	00 00       	nop
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <scheduler_task_stack_push>:
	{
		next_task->next_task = scheduler_task_clean_child(next_task->next_task);
		next_task = next_task->next_task;
	}
	sei();
 }
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <scheduler_task_stack_push+0x6>
 1fa:	1f 92       	push	r1
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	9a 83       	std	Y+2, r25	; 0x02
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	6b 83       	std	Y+3, r22	; 0x03
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	91 81       	ldd	r25, Z+1	; 0x01
 210:	2b 81       	ldd	r18, Y+3	; 0x03
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	9a 81       	ldd	r25, Y+2	; 0x02
 21a:	fc 01       	movw	r30, r24
 21c:	80 81       	ld	r24, Z
 21e:	91 81       	ldd	r25, Z+1	; 0x01
 220:	9c 01       	movw	r18, r24
 222:	21 50       	subi	r18, 0x01	; 1
 224:	31 09       	sbc	r19, r1
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	fc 01       	movw	r30, r24
 22c:	31 83       	std	Z+1, r19	; 0x01
 22e:	20 83       	st	Z, r18
 230:	00 00       	nop
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <scheduler_get_head_task>:
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	00 d0       	rcall	.+0      	; 0x244 <scheduler_get_head_task+0x6>
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	07 c0       	rjmp	.+14     	; 0x260 <scheduler_get_head_task+0x22>
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	9a 81       	ldd	r25, Y+2	; 0x02
 256:	fc 01       	movw	r30, r24
 258:	82 81       	ldd	r24, Z+2	; 0x02
 25a:	93 81       	ldd	r25, Z+3	; 0x03
 25c:	9a 83       	std	Y+2, r25	; 0x02
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	9a 81       	ldd	r25, Y+2	; 0x02
 264:	fc 01       	movw	r30, r24
 266:	82 81       	ldd	r24, Z+2	; 0x02
 268:	93 81       	ldd	r25, Z+3	; 0x03
 26a:	89 2b       	or	r24, r25
 26c:	91 f7       	brne	.-28     	; 0x252 <scheduler_get_head_task+0x14>
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	9a 81       	ldd	r25, Y+2	; 0x02
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <scheduler_calc_task_mem_size>:
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	00 d0       	rcall	.+0      	; 0x282 <scheduler_calc_task_mem_size+0x6>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	9a 83       	std	Y+2, r25	; 0x02
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	9a 81       	ldd	r25, Y+2	; 0x02
 28e:	09 96       	adiw	r24, 0x09	; 9
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <scheduler_initialize_stack>:
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <scheduler_initialize_stack+0x6>
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <scheduler_initialize_stack+0x8>
 2a2:	1f 92       	push	r1
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	9b 83       	std	Y+3, r25	; 0x03
 2aa:	8a 83       	std	Y+2, r24	; 0x02
 2ac:	7d 83       	std	Y+5, r23	; 0x05
 2ae:	6c 83       	std	Y+4, r22	; 0x04
 2b0:	84 e3       	ldi	r24, 0x34	; 52
 2b2:	92 e0       	ldi	r25, 0x02	; 2
 2b4:	28 2f       	mov	r18, r24
 2b6:	8a 81       	ldd	r24, Y+2	; 0x02
 2b8:	9b 81       	ldd	r25, Y+3	; 0x03
 2ba:	62 2f       	mov	r22, r18
 2bc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <scheduler_task_stack_push>
 2c0:	84 e3       	ldi	r24, 0x34	; 52
 2c2:	92 e0       	ldi	r25, 0x02	; 2
 2c4:	89 2f       	mov	r24, r25
 2c6:	99 27       	eor	r25, r25
 2c8:	28 2f       	mov	r18, r24
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	9b 81       	ldd	r25, Y+3	; 0x03
 2ce:	62 2f       	mov	r22, r18
 2d0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <scheduler_task_stack_push>
 2d4:	8c 81       	ldd	r24, Y+4	; 0x04
 2d6:	9d 81       	ldd	r25, Y+5	; 0x05
 2d8:	28 2f       	mov	r18, r24
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	9b 81       	ldd	r25, Y+3	; 0x03
 2de:	62 2f       	mov	r22, r18
 2e0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <scheduler_task_stack_push>
 2e4:	8c 81       	ldd	r24, Y+4	; 0x04
 2e6:	9d 81       	ldd	r25, Y+5	; 0x05
 2e8:	89 2f       	mov	r24, r25
 2ea:	99 27       	eor	r25, r25
 2ec:	28 2f       	mov	r18, r24
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	9b 81       	ldd	r25, Y+3	; 0x03
 2f2:	62 2f       	mov	r22, r18
 2f4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <scheduler_task_stack_push>
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	9b 81       	ldd	r25, Y+3	; 0x03
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <scheduler_task_stack_push>
 302:	19 82       	std	Y+1, r1	; 0x01
 304:	08 c0       	rjmp	.+16     	; 0x316 <scheduler_initialize_stack+0x7c>
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	9b 81       	ldd	r25, Y+3	; 0x03
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <scheduler_task_stack_push>
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	89 83       	std	Y+1, r24	; 0x01
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	80 32       	cpi	r24, 0x20	; 32
 31a:	a8 f3       	brcs	.-22     	; 0x306 <scheduler_initialize_stack+0x6c>
 31c:	00 00       	nop
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <scheduler_initialize_tcb>:
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	28 97       	sbiw	r28, 0x08	; 8
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	9c 83       	std	Y+4, r25	; 0x04
 344:	8b 83       	std	Y+3, r24	; 0x03
 346:	7e 83       	std	Y+6, r23	; 0x06
 348:	6d 83       	std	Y+5, r22	; 0x05
 34a:	58 87       	std	Y+8, r21	; 0x08
 34c:	4f 83       	std	Y+7, r20	; 0x07
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	9c 81       	ldd	r25, Y+4	; 0x04
 352:	9a 83       	std	Y+2, r25	; 0x02
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	8f 81       	ldd	r24, Y+7	; 0x07
 358:	98 85       	ldd	r25, Y+8	; 0x08
 35a:	0e 94 3e 01 	call	0x27c	; 0x27c <scheduler_calc_task_mem_size>
 35e:	9c 01       	movw	r18, r24
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	9c 81       	ldd	r25, Y+4	; 0x04
 364:	28 0f       	add	r18, r24
 366:	39 1f       	adc	r19, r25
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	9a 81       	ldd	r25, Y+2	; 0x02
 36c:	fc 01       	movw	r30, r24
 36e:	31 83       	std	Z+1, r19	; 0x01
 370:	20 83       	st	Z, r18
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	fc 01       	movw	r30, r24
 37a:	20 87       	std	Z+8, r18	; 0x08
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	9a 81       	ldd	r25, Y+2	; 0x02
 380:	fc 01       	movw	r30, r24
 382:	13 82       	std	Z+3, r1	; 0x03
 384:	12 82       	std	Z+2, r1	; 0x02
 386:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <task_id_pool>
 38a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <task_id_pool+0x1>
 38e:	9c 01       	movw	r18, r24
 390:	2f 5f       	subi	r18, 0xFF	; 255
 392:	3f 4f       	sbci	r19, 0xFF	; 255
 394:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <task_id_pool+0x1>
 398:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <task_id_pool>
 39c:	29 81       	ldd	r18, Y+1	; 0x01
 39e:	3a 81       	ldd	r19, Y+2	; 0x02
 3a0:	f9 01       	movw	r30, r18
 3a2:	97 83       	std	Z+7, r25	; 0x07
 3a4:	86 83       	std	Z+6, r24	; 0x06
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	9a 81       	ldd	r25, Y+2	; 0x02
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 81       	ld	r18, Z
 3ae:	31 81       	ldd	r19, Z+1	; 0x01
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	9a 81       	ldd	r25, Y+2	; 0x02
 3b4:	fc 01       	movw	r30, r24
 3b6:	35 83       	std	Z+5, r19	; 0x05
 3b8:	24 83       	std	Z+4, r18	; 0x04
 3ba:	0e 94 1f 01 	call	0x23e	; 0x23e <scheduler_get_head_task>
 3be:	9c 01       	movw	r18, r24
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
 3c2:	9a 81       	ldd	r25, Y+2	; 0x02
 3c4:	f9 01       	movw	r30, r18
 3c6:	93 83       	std	Z+3, r25	; 0x03
 3c8:	82 83       	std	Z+2, r24	; 0x02
 3ca:	2d 81       	ldd	r18, Y+5	; 0x05
 3cc:	3e 81       	ldd	r19, Y+6	; 0x06
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	9a 81       	ldd	r25, Y+2	; 0x02
 3d2:	b9 01       	movw	r22, r18
 3d4:	0e 94 4d 01 	call	0x29a	; 0x29a <scheduler_initialize_stack>
 3d8:	00 00       	nop
 3da:	28 96       	adiw	r28, 0x08	; 8
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <scheduler_allocate_task_memory>:
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <scheduler_allocate_task_memory+0x6>
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	9a 83       	std	Y+2, r25	; 0x02
 3f8:	89 83       	std	Y+1, r24	; 0x01
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	0e 94 3e 01 	call	0x27c	; 0x27c <scheduler_calc_task_mem_size>
 402:	0e 94 0a 04 	call	0x814	; 0x814 <malloc>
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <scheduler_next_ready_task>:
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	00 d0       	rcall	.+0      	; 0x416 <scheduler_next_ready_task+0x6>
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
 41a:	9a 83       	std	Y+2, r25	; 0x02
 41c:	89 83       	std	Y+1, r24	; 0x01
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	9a 81       	ldd	r25, Y+2	; 0x02
 422:	fc 01       	movw	r30, r24
 424:	82 81       	ldd	r24, Z+2	; 0x02
 426:	93 81       	ldd	r25, Z+3	; 0x03
 428:	89 2b       	or	r24, r25
 42a:	b9 f0       	breq	.+46     	; 0x45a <scheduler_next_ready_task+0x4a>
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	9a 81       	ldd	r25, Y+2	; 0x02
 430:	fc 01       	movw	r30, r24
 432:	82 81       	ldd	r24, Z+2	; 0x02
 434:	93 81       	ldd	r25, Z+3	; 0x03
 436:	fc 01       	movw	r30, r24
 438:	80 85       	ldd	r24, Z+8	; 0x08
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	31 f4       	brne	.+12     	; 0x44a <scheduler_next_ready_task+0x3a>
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	9a 81       	ldd	r25, Y+2	; 0x02
 442:	fc 01       	movw	r30, r24
 444:	82 81       	ldd	r24, Z+2	; 0x02
 446:	93 81       	ldd	r25, Z+3	; 0x03
 448:	0a c0       	rjmp	.+20     	; 0x45e <scheduler_next_ready_task+0x4e>
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	fc 01       	movw	r30, r24
 450:	82 81       	ldd	r24, Z+2	; 0x02
 452:	93 81       	ldd	r25, Z+3	; 0x03
 454:	0e 94 08 02 	call	0x410	; 0x410 <scheduler_next_ready_task>
 458:	02 c0       	rjmp	.+4      	; 0x45e <scheduler_next_ready_task+0x4e>
 45a:	88 e0       	ldi	r24, 0x08	; 8
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <scheduler_task_exit>:
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_task>
 474:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <current_task+0x1>
 478:	24 e0       	ldi	r18, 0x04	; 4
 47a:	fc 01       	movw	r30, r24
 47c:	20 87       	std	Z+8, r18	; 0x08
 47e:	ff cf       	rjmp	.-2      	; 0x47e <scheduler_task_exit+0x16>

00000480 <scheduler_context_switch>:

 static void scheduler_context_switch(void** current_context_sp, void** next_context_sp)
 {
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	00 d0       	rcall	.+0      	; 0x486 <scheduler_context_switch+0x6>
 486:	00 d0       	rcall	.+0      	; 0x488 <scheduler_context_switch+0x8>
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	9a 83       	std	Y+2, r25	; 0x02
 48e:	89 83       	std	Y+1, r24	; 0x01
 490:	7c 83       	std	Y+4, r23	; 0x04
 492:	6b 83       	std	Y+3, r22	; 0x03
	// Set the current task before calling this function.
	// That should be done atomically with this function.
	megos_context_switch(current_context_sp, next_context_sp);
 494:	2b 81       	ldd	r18, Y+3	; 0x03
 496:	3c 81       	ldd	r19, Y+4	; 0x04
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	9a 81       	ldd	r25, Y+2	; 0x02
 49c:	b9 01       	movw	r22, r18
 49e:	0e 94 53 00 	call	0xa6	; 0xa6 <megos_context_switch>
 }
 4a2:	00 00       	nop
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <megos_new_task>:

 unsigned int megos_new_task(mos_task_fn aptTask, unsigned int aiSize)
 {
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	00 d0       	rcall	.+0      	; 0x4b8 <megos_new_task+0x6>
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <megos_new_task+0x8>
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <megos_new_task+0xa>
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
 4c0:	9c 83       	std	Y+4, r25	; 0x04
 4c2:	8b 83       	std	Y+3, r24	; 0x03
 4c4:	7e 83       	std	Y+6, r23	; 0x06
 4c6:	6d 83       	std	Y+5, r22	; 0x05
	cli();
 4c8:	f8 94       	cli
	void* memory_block = scheduler_allocate_task_memory(aiSize);
 4ca:	8d 81       	ldd	r24, Y+5	; 0x05
 4cc:	9e 81       	ldd	r25, Y+6	; 0x06
 4ce:	0e 94 f6 01 	call	0x3ec	; 0x3ec <scheduler_allocate_task_memory>
 4d2:	9a 83       	std	Y+2, r25	; 0x02
 4d4:	89 83       	std	Y+1, r24	; 0x01
	scheduler_initialize_tcb(memory_block, aptTask, aiSize);
 4d6:	4d 81       	ldd	r20, Y+5	; 0x05
 4d8:	5e 81       	ldd	r21, Y+6	; 0x06
 4da:	2b 81       	ldd	r18, Y+3	; 0x03
 4dc:	3c 81       	ldd	r19, Y+4	; 0x04
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	9a 81       	ldd	r25, Y+2	; 0x02
 4e2:	b9 01       	movw	r22, r18
 4e4:	0e 94 97 01 	call	0x32e	; 0x32e <scheduler_initialize_tcb>
	// TODO: Assign IDs.
	sei();
 4e8:	78 94       	sei
	return 1;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 }
 4ee:	26 96       	adiw	r28, 0x06	; 6
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	f8 94       	cli
 4f4:	de bf       	out	0x3e, r29	; 62
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	cd bf       	out	0x3d, r28	; 61
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <megos_schedule>:

 void megos_schedule()
 {
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	00 d0       	rcall	.+0      	; 0x506 <megos_schedule+0x6>
 506:	00 d0       	rcall	.+0      	; 0x508 <megos_schedule+0x8>
 508:	00 d0       	rcall	.+0      	; 0x50a <megos_schedule+0xa>
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
	cli();
 50e:	f8 94       	cli
	struct mos_tcb* next_task = scheduler_next_ready_task(current_task);
 510:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_task>
 514:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <current_task+0x1>
 518:	0e 94 08 02 	call	0x410	; 0x410 <scheduler_next_ready_task>
 51c:	9a 83       	std	Y+2, r25	; 0x02
 51e:	89 83       	std	Y+1, r24	; 0x01

	if(next_task != current_task)
 520:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_task>
 524:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <current_task+0x1>
 528:	29 81       	ldd	r18, Y+1	; 0x01
 52a:	3a 81       	ldd	r19, Y+2	; 0x02
 52c:	28 17       	cp	r18, r24
 52e:	39 07       	cpc	r19, r25
 530:	b9 f0       	breq	.+46     	; 0x560 <megos_schedule+0x60>
	{
		void** curr_sp = &current_task->stack_pointer;
 532:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_task>
 536:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <current_task+0x1>
 53a:	9c 83       	std	Y+4, r25	; 0x04
 53c:	8b 83       	std	Y+3, r24	; 0x03
		void** next_sp = &next_task->stack_pointer;
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	9e 83       	std	Y+6, r25	; 0x06
 544:	8d 83       	std	Y+5, r24	; 0x05
		current_task = next_task;
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	9a 81       	ldd	r25, Y+2	; 0x02
 54a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <current_task+0x1>
 54e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_task>
		scheduler_context_switch(curr_sp, next_sp);
 552:	2d 81       	ldd	r18, Y+5	; 0x05
 554:	3e 81       	ldd	r19, Y+6	; 0x06
 556:	8b 81       	ldd	r24, Y+3	; 0x03
 558:	9c 81       	ldd	r25, Y+4	; 0x04
 55a:	b9 01       	movw	r22, r18
 55c:	0e 94 40 02 	call	0x480	; 0x480 <scheduler_context_switch>
	}
	sei();
 560:	78 94       	sei
 562:	00 00       	nop
 564:	26 96       	adiw	r28, 0x06	; 6
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <sched_timer_enable_CTC>:
#include "megos_system.h"
#include <avr/io.h>
#include <avr/interrupt.h>

static void sched_timer_enable_CTC(void)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
	// Set timer to CTC Mode. See atmel manual 19.9.1
	TCCR0A &= (0xFC);
 57e:	84 e4       	ldi	r24, 0x44	; 68
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	24 e4       	ldi	r18, 0x44	; 68
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	f9 01       	movw	r30, r18
 588:	20 81       	ld	r18, Z
 58a:	2c 7f       	andi	r18, 0xFC	; 252
 58c:	fc 01       	movw	r30, r24
 58e:	20 83       	st	Z, r18
	TCCR0A |= (0x1 << WGM01);
 590:	84 e4       	ldi	r24, 0x44	; 68
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	24 e4       	ldi	r18, 0x44	; 68
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	f9 01       	movw	r30, r18
 59a:	20 81       	ld	r18, Z
 59c:	22 60       	ori	r18, 0x02	; 2
 59e:	fc 01       	movw	r30, r24
 5a0:	20 83       	st	Z, r18
}
 5a2:	00 00       	nop
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <sched_timer_set_ticks>:

static void sched_timer_set_ticks(unsigned char aiTicks)
{
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	1f 92       	push	r1
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 5b4:	89 83       	std	Y+1, r24	; 0x01
	// Set the compare value for timer 0 to aiTicks
	// See manual 19.9.6
	OCR0A = aiTicks;
 5b6:	87 e4       	ldi	r24, 0x47	; 71
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	29 81       	ldd	r18, Y+1	; 0x01
 5bc:	fc 01       	movw	r30, r24
 5be:	20 83       	st	Z, r18
}
 5c0:	00 00       	nop
 5c2:	0f 90       	pop	r0
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <sched_timer_enable>:

static void sched_timer_enable(void)
{
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
	// See 4b.
	// Sets the interrupt Compare Flag Interrupt Enable Bit.
	TIMSK0 |= (1 << OCIE0A);
 5d2:	8e e6       	ldi	r24, 0x6E	; 110
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	2e e6       	ldi	r18, 0x6E	; 110
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	f9 01       	movw	r30, r18
 5dc:	20 81       	ld	r18, Z
 5de:	22 60       	ori	r18, 0x02	; 2
 5e0:	fc 01       	movw	r30, r24
 5e2:	20 83       	st	Z, r18
}
 5e4:	00 00       	nop
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <megos_sched_timer_set>:

void megos_sched_timer_set(int aiMilliseconds)
{
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <megos_sched_timer_set+0x6>
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <megos_sched_timer_set+0x8>
 5f4:	00 d0       	rcall	.+0      	; 0x5f6 <megos_sched_timer_set+0xa>
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	9e 83       	std	Y+6, r25	; 0x06
 5fc:	8d 83       	std	Y+5, r24	; 0x05
	cli();
 5fe:	f8 94       	cli
	sched_timer_enable();
 600:	0e 94 e5 02 	call	0x5ca	; 0x5ca <sched_timer_enable>
	sched_timer_enable_CTC();
 604:	0e 94 bb 02 	call	0x576	; 0x576 <sched_timer_enable_CTC>
	
	long iTicks = CLOCK_TICKS_PER_MS * aiMilliseconds;
 608:	8d 81       	ldd	r24, Y+5	; 0x05
 60a:	9e 81       	ldd	r25, Y+6	; 0x06
 60c:	9c 01       	movw	r18, r24
 60e:	99 0f       	add	r25, r25
 610:	44 0b       	sbc	r20, r20
 612:	55 0b       	sbc	r21, r21
 614:	80 e2       	ldi	r24, 0x20	; 32
 616:	9e e4       	ldi	r25, 0x4E	; 78
 618:	dc 01       	movw	r26, r24
 61a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__muluhisi3>
 61e:	dc 01       	movw	r26, r24
 620:	cb 01       	movw	r24, r22
 622:	89 83       	std	Y+1, r24	; 0x01
 624:	9a 83       	std	Y+2, r25	; 0x02
 626:	ab 83       	std	Y+3, r26	; 0x03
 628:	bc 83       	std	Y+4, r27	; 0x04

	// Clear the Pre-Scaler bits. See atmel manual 19.9.2
	TCCR0B &= (0xF8);
 62a:	85 e4       	ldi	r24, 0x45	; 69
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	25 e4       	ldi	r18, 0x45	; 69
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	f9 01       	movw	r30, r18
 634:	20 81       	ld	r18, Z
 636:	28 7f       	andi	r18, 0xF8	; 248
 638:	fc 01       	movw	r30, r24
 63a:	20 83       	st	Z, r18
	
	if(iTicks < 256)
 63c:	89 81       	ldd	r24, Y+1	; 0x01
 63e:	9a 81       	ldd	r25, Y+2	; 0x02
 640:	ab 81       	ldd	r26, Y+3	; 0x03
 642:	bc 81       	ldd	r27, Y+4	; 0x04
 644:	8f 3f       	cpi	r24, 0xFF	; 255
 646:	91 05       	cpc	r25, r1
 648:	a1 05       	cpc	r26, r1
 64a:	b1 05       	cpc	r27, r1
 64c:	09 f0       	breq	.+2      	; 0x650 <megos_sched_timer_set+0x64>
 64e:	54 f4       	brge	.+20     	; 0x664 <megos_sched_timer_set+0x78>
	{
		// Set Pre-scaler to 1
		TCCR0B |= (1 << CS00);
 650:	85 e4       	ldi	r24, 0x45	; 69
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	25 e4       	ldi	r18, 0x45	; 69
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	f9 01       	movw	r30, r18
 65a:	20 81       	ld	r18, Z
 65c:	21 60       	ori	r18, 0x01	; 1
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
 662:	b0 c0       	rjmp	.+352    	; 0x7c4 <megos_sched_timer_set+0x1d8>
	}
	else if( iTicks / 8 < 256 )
 664:	89 81       	ldd	r24, Y+1	; 0x01
 666:	9a 81       	ldd	r25, Y+2	; 0x02
 668:	ab 81       	ldd	r26, Y+3	; 0x03
 66a:	bc 81       	ldd	r27, Y+4	; 0x04
 66c:	81 15       	cp	r24, r1
 66e:	98 40       	sbci	r25, 0x08	; 8
 670:	a1 05       	cpc	r26, r1
 672:	b1 05       	cpc	r27, r1
 674:	fc f4       	brge	.+62     	; 0x6b4 <megos_sched_timer_set+0xc8>
	{
		// Set Pre-scaler to 8
		TCCR0B |= (1 << CS01);
 676:	85 e4       	ldi	r24, 0x45	; 69
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	25 e4       	ldi	r18, 0x45	; 69
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	f9 01       	movw	r30, r18
 680:	20 81       	ld	r18, Z
 682:	22 60       	ori	r18, 0x02	; 2
 684:	fc 01       	movw	r30, r24
 686:	20 83       	st	Z, r18
		iTicks /= 8;
 688:	89 81       	ldd	r24, Y+1	; 0x01
 68a:	9a 81       	ldd	r25, Y+2	; 0x02
 68c:	ab 81       	ldd	r26, Y+3	; 0x03
 68e:	bc 81       	ldd	r27, Y+4	; 0x04
 690:	bb 23       	and	r27, r27
 692:	1c f4       	brge	.+6      	; 0x69a <megos_sched_timer_set+0xae>
 694:	07 96       	adiw	r24, 0x07	; 7
 696:	a1 1d       	adc	r26, r1
 698:	b1 1d       	adc	r27, r1
 69a:	68 94       	set
 69c:	12 f8       	bld	r1, 2
 69e:	b5 95       	asr	r27
 6a0:	a7 95       	ror	r26
 6a2:	97 95       	ror	r25
 6a4:	87 95       	ror	r24
 6a6:	16 94       	lsr	r1
 6a8:	d1 f7       	brne	.-12     	; 0x69e <megos_sched_timer_set+0xb2>
 6aa:	89 83       	std	Y+1, r24	; 0x01
 6ac:	9a 83       	std	Y+2, r25	; 0x02
 6ae:	ab 83       	std	Y+3, r26	; 0x03
 6b0:	bc 83       	std	Y+4, r27	; 0x04
 6b2:	88 c0       	rjmp	.+272    	; 0x7c4 <megos_sched_timer_set+0x1d8>
	}
	else if( iTicks / 64 < 256 )
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	9a 81       	ldd	r25, Y+2	; 0x02
 6b8:	ab 81       	ldd	r26, Y+3	; 0x03
 6ba:	bc 81       	ldd	r27, Y+4	; 0x04
 6bc:	81 15       	cp	r24, r1
 6be:	90 44       	sbci	r25, 0x40	; 64
 6c0:	a1 05       	cpc	r26, r1
 6c2:	b1 05       	cpc	r27, r1
 6c4:	44 f5       	brge	.+80     	; 0x716 <megos_sched_timer_set+0x12a>
	{
		// Set Pre-scaler to 64
		TCCR0B |= (1 << CS00);
 6c6:	85 e4       	ldi	r24, 0x45	; 69
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	25 e4       	ldi	r18, 0x45	; 69
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	f9 01       	movw	r30, r18
 6d0:	20 81       	ld	r18, Z
 6d2:	21 60       	ori	r18, 0x01	; 1
 6d4:	fc 01       	movw	r30, r24
 6d6:	20 83       	st	Z, r18
		TCCR0B |= (1 << CS01);
 6d8:	85 e4       	ldi	r24, 0x45	; 69
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	25 e4       	ldi	r18, 0x45	; 69
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	f9 01       	movw	r30, r18
 6e2:	20 81       	ld	r18, Z
 6e4:	22 60       	ori	r18, 0x02	; 2
 6e6:	fc 01       	movw	r30, r24
 6e8:	20 83       	st	Z, r18
		iTicks /= 64;
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
 6ec:	9a 81       	ldd	r25, Y+2	; 0x02
 6ee:	ab 81       	ldd	r26, Y+3	; 0x03
 6f0:	bc 81       	ldd	r27, Y+4	; 0x04
 6f2:	bb 23       	and	r27, r27
 6f4:	1c f4       	brge	.+6      	; 0x6fc <megos_sched_timer_set+0x110>
 6f6:	cf 96       	adiw	r24, 0x3f	; 63
 6f8:	a1 1d       	adc	r26, r1
 6fa:	b1 1d       	adc	r27, r1
 6fc:	68 94       	set
 6fe:	15 f8       	bld	r1, 5
 700:	b5 95       	asr	r27
 702:	a7 95       	ror	r26
 704:	97 95       	ror	r25
 706:	87 95       	ror	r24
 708:	16 94       	lsr	r1
 70a:	d1 f7       	brne	.-12     	; 0x700 <megos_sched_timer_set+0x114>
 70c:	89 83       	std	Y+1, r24	; 0x01
 70e:	9a 83       	std	Y+2, r25	; 0x02
 710:	ab 83       	std	Y+3, r26	; 0x03
 712:	bc 83       	std	Y+4, r27	; 0x04
 714:	57 c0       	rjmp	.+174    	; 0x7c4 <megos_sched_timer_set+0x1d8>
	}
	else if( iTicks / 256 < 256 )
 716:	89 81       	ldd	r24, Y+1	; 0x01
 718:	9a 81       	ldd	r25, Y+2	; 0x02
 71a:	ab 81       	ldd	r26, Y+3	; 0x03
 71c:	bc 81       	ldd	r27, Y+4	; 0x04
 71e:	00 97       	sbiw	r24, 0x00	; 0
 720:	a1 40       	sbci	r26, 0x01	; 1
 722:	b1 05       	cpc	r27, r1
 724:	f4 f4       	brge	.+60     	; 0x762 <megos_sched_timer_set+0x176>
	{
		// Set Pre-scaler to 256
		TCCR0B |= (1 << CS02);
 726:	85 e4       	ldi	r24, 0x45	; 69
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	25 e4       	ldi	r18, 0x45	; 69
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	f9 01       	movw	r30, r18
 730:	20 81       	ld	r18, Z
 732:	24 60       	ori	r18, 0x04	; 4
 734:	fc 01       	movw	r30, r24
 736:	20 83       	st	Z, r18
		iTicks /= 256;
 738:	89 81       	ldd	r24, Y+1	; 0x01
 73a:	9a 81       	ldd	r25, Y+2	; 0x02
 73c:	ab 81       	ldd	r26, Y+3	; 0x03
 73e:	bc 81       	ldd	r27, Y+4	; 0x04
 740:	bb 23       	and	r27, r27
 742:	24 f4       	brge	.+8      	; 0x74c <megos_sched_timer_set+0x160>
 744:	81 50       	subi	r24, 0x01	; 1
 746:	9f 4f       	sbci	r25, 0xFF	; 255
 748:	af 4f       	sbci	r26, 0xFF	; 255
 74a:	bf 4f       	sbci	r27, 0xFF	; 255
 74c:	89 2f       	mov	r24, r25
 74e:	9a 2f       	mov	r25, r26
 750:	ab 2f       	mov	r26, r27
 752:	bb 27       	eor	r27, r27
 754:	a7 fd       	sbrc	r26, 7
 756:	ba 95       	dec	r27
 758:	89 83       	std	Y+1, r24	; 0x01
 75a:	9a 83       	std	Y+2, r25	; 0x02
 75c:	ab 83       	std	Y+3, r26	; 0x03
 75e:	bc 83       	std	Y+4, r27	; 0x04
 760:	31 c0       	rjmp	.+98     	; 0x7c4 <megos_sched_timer_set+0x1d8>
	}
	else if( iTicks / 1024 < 256 )
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	9a 81       	ldd	r25, Y+2	; 0x02
 766:	ab 81       	ldd	r26, Y+3	; 0x03
 768:	bc 81       	ldd	r27, Y+4	; 0x04
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	a4 40       	sbci	r26, 0x04	; 4
 76e:	b1 05       	cpc	r27, r1
 770:	4c f5       	brge	.+82     	; 0x7c4 <megos_sched_timer_set+0x1d8>
	{
		// Set Pre-scaler to 1024
		TCCR0B |= (1 << CS00);
 772:	85 e4       	ldi	r24, 0x45	; 69
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	25 e4       	ldi	r18, 0x45	; 69
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	f9 01       	movw	r30, r18
 77c:	20 81       	ld	r18, Z
 77e:	21 60       	ori	r18, 0x01	; 1
 780:	fc 01       	movw	r30, r24
 782:	20 83       	st	Z, r18
		TCCR0B |= (1 << CS02);
 784:	85 e4       	ldi	r24, 0x45	; 69
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	25 e4       	ldi	r18, 0x45	; 69
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	f9 01       	movw	r30, r18
 78e:	20 81       	ld	r18, Z
 790:	24 60       	ori	r18, 0x04	; 4
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
		iTicks /= 1024;
 796:	89 81       	ldd	r24, Y+1	; 0x01
 798:	9a 81       	ldd	r25, Y+2	; 0x02
 79a:	ab 81       	ldd	r26, Y+3	; 0x03
 79c:	bc 81       	ldd	r27, Y+4	; 0x04
 79e:	bb 23       	and	r27, r27
 7a0:	24 f4       	brge	.+8      	; 0x7aa <megos_sched_timer_set+0x1be>
 7a2:	81 50       	subi	r24, 0x01	; 1
 7a4:	9c 4f       	sbci	r25, 0xFC	; 252
 7a6:	af 4f       	sbci	r26, 0xFF	; 255
 7a8:	bf 4f       	sbci	r27, 0xFF	; 255
 7aa:	07 2e       	mov	r0, r23
 7ac:	7a e0       	ldi	r23, 0x0A	; 10
 7ae:	b5 95       	asr	r27
 7b0:	a7 95       	ror	r26
 7b2:	97 95       	ror	r25
 7b4:	87 95       	ror	r24
 7b6:	7a 95       	dec	r23
 7b8:	d1 f7       	brne	.-12     	; 0x7ae <megos_sched_timer_set+0x1c2>
 7ba:	70 2d       	mov	r23, r0
 7bc:	89 83       	std	Y+1, r24	; 0x01
 7be:	9a 83       	std	Y+2, r25	; 0x02
 7c0:	ab 83       	std	Y+3, r26	; 0x03
 7c2:	bc 83       	std	Y+4, r27	; 0x04
	{
		// Cant do it.
	}
	
	// Now set the compare value to iMinResolution
	sched_timer_set_ticks(iTicks & 0xFF);
 7c4:	89 81       	ldd	r24, Y+1	; 0x01
 7c6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <sched_timer_set_ticks>
	sei();
 7ca:	78 94       	sei
 7cc:	00 00       	nop
 7ce:	26 96       	adiw	r28, 0x06	; 6
 7d0:	0f b6       	in	r0, 0x3f	; 63
 7d2:	f8 94       	cli
 7d4:	de bf       	out	0x3e, r29	; 62
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	cd bf       	out	0x3d, r28	; 61
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	08 95       	ret

000007e0 <__muluhisi3>:
 7e0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__umulhisi3>
 7e4:	a5 9f       	mul	r26, r21
 7e6:	90 0d       	add	r25, r0
 7e8:	b4 9f       	mul	r27, r20
 7ea:	90 0d       	add	r25, r0
 7ec:	a4 9f       	mul	r26, r20
 7ee:	80 0d       	add	r24, r0
 7f0:	91 1d       	adc	r25, r1
 7f2:	11 24       	eor	r1, r1
 7f4:	08 95       	ret

000007f6 <__umulhisi3>:
 7f6:	a2 9f       	mul	r26, r18
 7f8:	b0 01       	movw	r22, r0
 7fa:	b3 9f       	mul	r27, r19
 7fc:	c0 01       	movw	r24, r0
 7fe:	a3 9f       	mul	r26, r19
 800:	70 0d       	add	r23, r0
 802:	81 1d       	adc	r24, r1
 804:	11 24       	eor	r1, r1
 806:	91 1d       	adc	r25, r1
 808:	b2 9f       	mul	r27, r18
 80a:	70 0d       	add	r23, r0
 80c:	81 1d       	adc	r24, r1
 80e:	11 24       	eor	r1, r1
 810:	91 1d       	adc	r25, r1
 812:	08 95       	ret

00000814 <malloc>:
 814:	0f 93       	push	r16
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	82 30       	cpi	r24, 0x02	; 2
 81e:	91 05       	cpc	r25, r1
 820:	10 f4       	brcc	.+4      	; 0x826 <malloc+0x12>
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__flp>
 82a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__flp+0x1>
 82e:	20 e0       	ldi	r18, 0x00	; 0
 830:	30 e0       	ldi	r19, 0x00	; 0
 832:	a0 e0       	ldi	r26, 0x00	; 0
 834:	b0 e0       	ldi	r27, 0x00	; 0
 836:	30 97       	sbiw	r30, 0x00	; 0
 838:	19 f1       	breq	.+70     	; 0x880 <malloc+0x6c>
 83a:	40 81       	ld	r20, Z
 83c:	51 81       	ldd	r21, Z+1	; 0x01
 83e:	02 81       	ldd	r16, Z+2	; 0x02
 840:	13 81       	ldd	r17, Z+3	; 0x03
 842:	48 17       	cp	r20, r24
 844:	59 07       	cpc	r21, r25
 846:	c8 f0       	brcs	.+50     	; 0x87a <malloc+0x66>
 848:	84 17       	cp	r24, r20
 84a:	95 07       	cpc	r25, r21
 84c:	69 f4       	brne	.+26     	; 0x868 <malloc+0x54>
 84e:	10 97       	sbiw	r26, 0x00	; 0
 850:	31 f0       	breq	.+12     	; 0x85e <malloc+0x4a>
 852:	12 96       	adiw	r26, 0x02	; 2
 854:	0c 93       	st	X, r16
 856:	12 97       	sbiw	r26, 0x02	; 2
 858:	13 96       	adiw	r26, 0x03	; 3
 85a:	1c 93       	st	X, r17
 85c:	27 c0       	rjmp	.+78     	; 0x8ac <malloc+0x98>
 85e:	00 93 18 01 	sts	0x0118, r16	; 0x800118 <__flp>
 862:	10 93 19 01 	sts	0x0119, r17	; 0x800119 <__flp+0x1>
 866:	22 c0       	rjmp	.+68     	; 0x8ac <malloc+0x98>
 868:	21 15       	cp	r18, r1
 86a:	31 05       	cpc	r19, r1
 86c:	19 f0       	breq	.+6      	; 0x874 <malloc+0x60>
 86e:	42 17       	cp	r20, r18
 870:	53 07       	cpc	r21, r19
 872:	18 f4       	brcc	.+6      	; 0x87a <malloc+0x66>
 874:	9a 01       	movw	r18, r20
 876:	bd 01       	movw	r22, r26
 878:	ef 01       	movw	r28, r30
 87a:	df 01       	movw	r26, r30
 87c:	f8 01       	movw	r30, r16
 87e:	db cf       	rjmp	.-74     	; 0x836 <malloc+0x22>
 880:	21 15       	cp	r18, r1
 882:	31 05       	cpc	r19, r1
 884:	f9 f0       	breq	.+62     	; 0x8c4 <malloc+0xb0>
 886:	28 1b       	sub	r18, r24
 888:	39 0b       	sbc	r19, r25
 88a:	24 30       	cpi	r18, 0x04	; 4
 88c:	31 05       	cpc	r19, r1
 88e:	80 f4       	brcc	.+32     	; 0x8b0 <malloc+0x9c>
 890:	8a 81       	ldd	r24, Y+2	; 0x02
 892:	9b 81       	ldd	r25, Y+3	; 0x03
 894:	61 15       	cp	r22, r1
 896:	71 05       	cpc	r23, r1
 898:	21 f0       	breq	.+8      	; 0x8a2 <malloc+0x8e>
 89a:	fb 01       	movw	r30, r22
 89c:	93 83       	std	Z+3, r25	; 0x03
 89e:	82 83       	std	Z+2, r24	; 0x02
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <malloc+0x96>
 8a2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__flp+0x1>
 8a6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__flp>
 8aa:	fe 01       	movw	r30, r28
 8ac:	32 96       	adiw	r30, 0x02	; 2
 8ae:	44 c0       	rjmp	.+136    	; 0x938 <__stack+0x39>
 8b0:	fe 01       	movw	r30, r28
 8b2:	e2 0f       	add	r30, r18
 8b4:	f3 1f       	adc	r31, r19
 8b6:	81 93       	st	Z+, r24
 8b8:	91 93       	st	Z+, r25
 8ba:	22 50       	subi	r18, 0x02	; 2
 8bc:	31 09       	sbc	r19, r1
 8be:	39 83       	std	Y+1, r19	; 0x01
 8c0:	28 83       	st	Y, r18
 8c2:	3a c0       	rjmp	.+116    	; 0x938 <__stack+0x39>
 8c4:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__brkval>
 8c8:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__brkval+0x1>
 8cc:	23 2b       	or	r18, r19
 8ce:	41 f4       	brne	.+16     	; 0x8e0 <malloc+0xcc>
 8d0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 8d4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 8d8:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__brkval+0x1>
 8dc:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__brkval>
 8e0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 8e4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 8e8:	21 15       	cp	r18, r1
 8ea:	31 05       	cpc	r19, r1
 8ec:	41 f4       	brne	.+16     	; 0x8fe <malloc+0xea>
 8ee:	2d b7       	in	r18, 0x3d	; 61
 8f0:	3e b7       	in	r19, 0x3e	; 62
 8f2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 8f6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 8fa:	24 1b       	sub	r18, r20
 8fc:	35 0b       	sbc	r19, r21
 8fe:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__brkval>
 902:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__brkval+0x1>
 906:	e2 17       	cp	r30, r18
 908:	f3 07       	cpc	r31, r19
 90a:	a0 f4       	brcc	.+40     	; 0x934 <__stack+0x35>
 90c:	2e 1b       	sub	r18, r30
 90e:	3f 0b       	sbc	r19, r31
 910:	28 17       	cp	r18, r24
 912:	39 07       	cpc	r19, r25
 914:	78 f0       	brcs	.+30     	; 0x934 <__stack+0x35>
 916:	ac 01       	movw	r20, r24
 918:	4e 5f       	subi	r20, 0xFE	; 254
 91a:	5f 4f       	sbci	r21, 0xFF	; 255
 91c:	24 17       	cp	r18, r20
 91e:	35 07       	cpc	r19, r21
 920:	48 f0       	brcs	.+18     	; 0x934 <__stack+0x35>
 922:	4e 0f       	add	r20, r30
 924:	5f 1f       	adc	r21, r31
 926:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <__brkval+0x1>
 92a:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <__brkval>
 92e:	81 93       	st	Z+, r24
 930:	91 93       	st	Z+, r25
 932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
 934:	e0 e0       	ldi	r30, 0x00	; 0
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	cf 01       	movw	r24, r30
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	1f 91       	pop	r17
 940:	0f 91       	pop	r16
 942:	08 95       	ret

00000944 <free>:
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	00 97       	sbiw	r24, 0x00	; 0
 94a:	09 f4       	brne	.+2      	; 0x94e <free+0xa>
 94c:	81 c0       	rjmp	.+258    	; 0xa50 <free+0x10c>
 94e:	fc 01       	movw	r30, r24
 950:	32 97       	sbiw	r30, 0x02	; 2
 952:	13 82       	std	Z+3, r1	; 0x03
 954:	12 82       	std	Z+2, r1	; 0x02
 956:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <__flp>
 95a:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <__flp+0x1>
 95e:	10 97       	sbiw	r26, 0x00	; 0
 960:	81 f4       	brne	.+32     	; 0x982 <free+0x3e>
 962:	20 81       	ld	r18, Z
 964:	31 81       	ldd	r19, Z+1	; 0x01
 966:	82 0f       	add	r24, r18
 968:	93 1f       	adc	r25, r19
 96a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__brkval>
 96e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__brkval+0x1>
 972:	28 17       	cp	r18, r24
 974:	39 07       	cpc	r19, r25
 976:	51 f5       	brne	.+84     	; 0x9cc <free+0x88>
 978:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <__brkval+0x1>
 97c:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <__brkval>
 980:	67 c0       	rjmp	.+206    	; 0xa50 <free+0x10c>
 982:	ed 01       	movw	r28, r26
 984:	20 e0       	ldi	r18, 0x00	; 0
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	ce 17       	cp	r28, r30
 98a:	df 07       	cpc	r29, r31
 98c:	40 f4       	brcc	.+16     	; 0x99e <free+0x5a>
 98e:	4a 81       	ldd	r20, Y+2	; 0x02
 990:	5b 81       	ldd	r21, Y+3	; 0x03
 992:	9e 01       	movw	r18, r28
 994:	41 15       	cp	r20, r1
 996:	51 05       	cpc	r21, r1
 998:	f1 f0       	breq	.+60     	; 0x9d6 <free+0x92>
 99a:	ea 01       	movw	r28, r20
 99c:	f5 cf       	rjmp	.-22     	; 0x988 <free+0x44>
 99e:	d3 83       	std	Z+3, r29	; 0x03
 9a0:	c2 83       	std	Z+2, r28	; 0x02
 9a2:	40 81       	ld	r20, Z
 9a4:	51 81       	ldd	r21, Z+1	; 0x01
 9a6:	84 0f       	add	r24, r20
 9a8:	95 1f       	adc	r25, r21
 9aa:	c8 17       	cp	r28, r24
 9ac:	d9 07       	cpc	r29, r25
 9ae:	59 f4       	brne	.+22     	; 0x9c6 <free+0x82>
 9b0:	88 81       	ld	r24, Y
 9b2:	99 81       	ldd	r25, Y+1	; 0x01
 9b4:	84 0f       	add	r24, r20
 9b6:	95 1f       	adc	r25, r21
 9b8:	02 96       	adiw	r24, 0x02	; 2
 9ba:	91 83       	std	Z+1, r25	; 0x01
 9bc:	80 83       	st	Z, r24
 9be:	8a 81       	ldd	r24, Y+2	; 0x02
 9c0:	9b 81       	ldd	r25, Y+3	; 0x03
 9c2:	93 83       	std	Z+3, r25	; 0x03
 9c4:	82 83       	std	Z+2, r24	; 0x02
 9c6:	21 15       	cp	r18, r1
 9c8:	31 05       	cpc	r19, r1
 9ca:	29 f4       	brne	.+10     	; 0x9d6 <free+0x92>
 9cc:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <__flp+0x1>
 9d0:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <__flp>
 9d4:	3d c0       	rjmp	.+122    	; 0xa50 <free+0x10c>
 9d6:	e9 01       	movw	r28, r18
 9d8:	fb 83       	std	Y+3, r31	; 0x03
 9da:	ea 83       	std	Y+2, r30	; 0x02
 9dc:	49 91       	ld	r20, Y+
 9de:	59 91       	ld	r21, Y+
 9e0:	c4 0f       	add	r28, r20
 9e2:	d5 1f       	adc	r29, r21
 9e4:	ec 17       	cp	r30, r28
 9e6:	fd 07       	cpc	r31, r29
 9e8:	61 f4       	brne	.+24     	; 0xa02 <free+0xbe>
 9ea:	80 81       	ld	r24, Z
 9ec:	91 81       	ldd	r25, Z+1	; 0x01
 9ee:	84 0f       	add	r24, r20
 9f0:	95 1f       	adc	r25, r21
 9f2:	02 96       	adiw	r24, 0x02	; 2
 9f4:	e9 01       	movw	r28, r18
 9f6:	99 83       	std	Y+1, r25	; 0x01
 9f8:	88 83       	st	Y, r24
 9fa:	82 81       	ldd	r24, Z+2	; 0x02
 9fc:	93 81       	ldd	r25, Z+3	; 0x03
 9fe:	9b 83       	std	Y+3, r25	; 0x03
 a00:	8a 83       	std	Y+2, r24	; 0x02
 a02:	e0 e0       	ldi	r30, 0x00	; 0
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	12 96       	adiw	r26, 0x02	; 2
 a08:	8d 91       	ld	r24, X+
 a0a:	9c 91       	ld	r25, X
 a0c:	13 97       	sbiw	r26, 0x03	; 3
 a0e:	00 97       	sbiw	r24, 0x00	; 0
 a10:	19 f0       	breq	.+6      	; 0xa18 <free+0xd4>
 a12:	fd 01       	movw	r30, r26
 a14:	dc 01       	movw	r26, r24
 a16:	f7 cf       	rjmp	.-18     	; 0xa06 <free+0xc2>
 a18:	8d 91       	ld	r24, X+
 a1a:	9c 91       	ld	r25, X
 a1c:	11 97       	sbiw	r26, 0x01	; 1
 a1e:	9d 01       	movw	r18, r26
 a20:	2e 5f       	subi	r18, 0xFE	; 254
 a22:	3f 4f       	sbci	r19, 0xFF	; 255
 a24:	82 0f       	add	r24, r18
 a26:	93 1f       	adc	r25, r19
 a28:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__brkval>
 a2c:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__brkval+0x1>
 a30:	28 17       	cp	r18, r24
 a32:	39 07       	cpc	r19, r25
 a34:	69 f4       	brne	.+26     	; 0xa50 <free+0x10c>
 a36:	30 97       	sbiw	r30, 0x00	; 0
 a38:	29 f4       	brne	.+10     	; 0xa44 <free+0x100>
 a3a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__flp+0x1>
 a3e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__flp>
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <free+0x104>
 a44:	13 82       	std	Z+3, r1	; 0x03
 a46:	12 82       	std	Z+2, r1	; 0x02
 a48:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__brkval+0x1>
 a4c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__brkval>
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	08 95       	ret

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
